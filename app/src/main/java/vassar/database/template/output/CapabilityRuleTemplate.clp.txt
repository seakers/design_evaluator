



        (defrule MANIFEST::SMAP_MWR-init-can-measure (declare (salience -20)) ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&SMAP_MWR) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh)) (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) => (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::SMAP_MWR-init-can-measure) " A" (call ?this getFactId) "}")))))

        (defrule CAPABILITIES-GENERATE::SMAP_MWR-measurements ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&SMAP_MWR) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1)) ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2)) => (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0)) (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))


        
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.4.1 Ocean surface wind speed")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                                (Accuracy# 2.5)
                    
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR0) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.3.2 Sea ice cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR1) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.2 soil moisture")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                                (Accuracy# 0.04)
                    
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR2) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.3.1 Ocean salinity")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Medium)
                                                (Accuracy# 0.6)
                    
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR3) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.2.4 snow cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR4) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.4.2 Ocean surface wind direction")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                                (Accuracy# 10.0)
                    
        (taken-by SMAP_MWR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_MWR5) (Instrument SMAP_MWR)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
    
    (assert (SYNERGIES::cross-registered (measurements  SMAP_MWR0  SMAP_MWR1  SMAP_MWR2  SMAP_MWR3  SMAP_MWR4  SMAP_MWR5  ) (degree-of-cross-registration instrument) (platform ?id  )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))

    (modify ?this (measurement-ids  SMAP_MWR0  SMAP_MWR1  SMAP_MWR2  SMAP_MWR3  SMAP_MWR4  SMAP_MWR5 )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))

    (modify ?this2 (copied-to-measurement-fact yes)
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_MWR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}"))))



        (defrule MANIFEST::BIOMASS-init-can-measure (declare (salience -20)) ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&BIOMASS) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh)) (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) => (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::BIOMASS-init-can-measure) " A" (call ?this getFactId) "}")))))

        (defrule CAPABILITIES-GENERATE::BIOMASS-measurements ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&BIOMASS) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1)) ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2)) => (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0)) (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))


        
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.1 Freeze/thaw state")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                                (Accuracy# 0.69)
                    
        (taken-by BIOMASS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id BIOMASS0) (Instrument BIOMASS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.2 soil moisture")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Medium)
                                                (Accuracy# 0.04)
                    
        (taken-by BIOMASS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id BIOMASS1) (Instrument BIOMASS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.2.4 snow cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by BIOMASS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id BIOMASS2) (Instrument BIOMASS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.7.2 flood monitoring")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by BIOMASS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id BIOMASS3) (Instrument BIOMASS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
    
    (assert (SYNERGIES::cross-registered (measurements  BIOMASS0  BIOMASS1  BIOMASS2  BIOMASS3  ) (degree-of-cross-registration instrument) (platform ?id  )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))

    (modify ?this (measurement-ids  BIOMASS0  BIOMASS1  BIOMASS2  BIOMASS3 )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))

    (modify ?this2 (copied-to-measurement-fact yes)
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::BIOMASS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}"))))



        (defrule MANIFEST::VIIRS-init-can-measure (declare (salience -20)) ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&VIIRS) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh)) (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) => (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::VIIRS-init-can-measure) " A" (call ?this getFactId) "}")))))

        (defrule CAPABILITIES-GENERATE::VIIRS-measurements ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&VIIRS) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1)) ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2)) => (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0)) (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))


        
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.5.1 Surface temperature -land-")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS0) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.4.2 vegetation state")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS1) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.6.2 landcover status")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS2) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.3.2 Sea ice cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS3) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.2 soil moisture")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                                (Accuracy# 0.1)
                    
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS4) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.2.4 snow cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS5) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.5.1 Surface temperature -ocean-")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS6) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by VIIRS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id VIIRS7) (Instrument VIIRS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
    
    (assert (SYNERGIES::cross-registered (measurements  VIIRS0  VIIRS1  VIIRS2  VIIRS3  VIIRS4  VIIRS5  VIIRS6  VIIRS7  ) (degree-of-cross-registration instrument) (platform ?id  )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))

    (modify ?this (measurement-ids  VIIRS0  VIIRS1  VIIRS2  VIIRS3  VIIRS4  VIIRS5  VIIRS6  VIIRS7 )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))

    (modify ?this2 (copied-to-measurement-fact yes)
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::VIIRS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}"))))



        (defrule MANIFEST::CMIS-init-can-measure (declare (salience -20)) ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CMIS) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh)) (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) => (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::CMIS-init-can-measure) " A" (call ?this getFactId) "}")))))

        (defrule CAPABILITIES-GENERATE::CMIS-measurements ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CMIS) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1)) ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2)) => (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0)) (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))


        
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.4.1 Ocean surface wind speed")
                                            (Accuracy# 1.0)
                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS0) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.5.1 Surface temperature -land-")
                                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS1) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.4.2 vegetation state")
                                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS2) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.3.2 Sea ice cover")
                                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS3) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.2 soil moisture")
                                            (Accuracy# 0.1)
                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS4) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.2.4 snow cover")
                                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS5) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "3.5.1 Surface temperature -ocean-")
                                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS6) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
                                            (Accuracy# 5.0)
                                                (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                    
        (taken-by CMIS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CMIS7) (Instrument CMIS)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
    
    (assert (SYNERGIES::cross-registered (measurements  CMIS0  CMIS1  CMIS2  CMIS3  CMIS4  CMIS5  CMIS6  CMIS7  ) (degree-of-cross-registration instrument) (platform ?id  )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))

    (modify ?this (measurement-ids  CMIS0  CMIS1  CMIS2  CMIS3  CMIS4  CMIS5  CMIS6  CMIS7 )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))

    (modify ?this2 (copied-to-measurement-fact yes)
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CMIS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}"))))



        (defrule MANIFEST::SMAP_RAD-init-can-measure (declare (salience -20)) ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&SMAP_RAD) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh)) (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) => (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::SMAP_RAD-init-can-measure) " A" (call ?this getFactId) "}")))))

        (defrule CAPABILITIES-GENERATE::SMAP_RAD-measurements ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&SMAP_RAD) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1)) ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2)) => (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0)) (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))


        
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.1 Freeze/thaw state")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                                (Accuracy# 0.79)
                    
        (taken-by SMAP_RAD) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_RAD0) (Instrument SMAP_RAD)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.3.2 soil moisture")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Medium)
                                                (Accuracy# 0.09)
                    
        (taken-by SMAP_RAD) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_RAD1) (Instrument SMAP_RAD)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "4.2.4 snow cover")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy Low)
                                        
        (taken-by SMAP_RAD) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_RAD2) (Instrument SMAP_RAD)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
                (assert (REQUIREMENTS::Measurement


            (Parameter "2.7.2 flood monitoring")
                                            (Region-of-interest Global)
                                                (Coverage-of-region-of-interest Global)
                                                (Accuracy High)
                                        
        (taken-by SMAP_RAD) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id SMAP_RAD3) (Instrument SMAP_RAD)
        (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))
        ))

    
    
    (assert (SYNERGIES::cross-registered (measurements  SMAP_RAD0  SMAP_RAD1  SMAP_RAD2  SMAP_RAD3  ) (degree-of-cross-registration instrument) (platform ?id  )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))

    (modify ?this (measurement-ids  SMAP_RAD0  SMAP_RAD1  SMAP_RAD2  SMAP_RAD3 )
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))

    (modify ?this2 (copied-to-measurement-fact yes)
    (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::SMAP_RAD-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}"))))


