


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river streamflow forecasts (40-80km achieved, 40km desired, 80km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river streamflow forecasts (40-80km achieved, 40km desired, 80km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (80% goal, 70% target)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (80% goal, 70% target)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate tidal sampling (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate tidal sampling (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3 days required 2 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3 days required 2 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3 days required 2 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3 days required 2 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Accuracy ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Accuracy ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


  


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA1-1) (attributes ) (index 1) (parent WEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river streamflow forecasts (40-80km achieved, 40km desired, 80km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river streamflow forecasts (40-80km achieved, 40km desired, 80km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA2-1) (attributes ) (index 1) (parent WEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WEA3-1) (attributes ) (index 1) (parent WEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-1) (attributes ) (index 1) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (80% goal, 70% target)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (80% goal, 70% target)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI1-2) (attributes ) (index 2) (parent CLI1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.3.1 Ocean salinity")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-1) (attributes ) (index 1) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate tidal sampling (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate tidal sampling (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::CLI2-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "3.4.1 Ocean surface wind speed")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id CLI2-2) (attributes ) (index 2) (parent CLI2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::CLI2-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3 days required 2 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3 days required 2 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO1-1) (attributes ) (index 1) (parent ECO1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::ECO2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.3 Carbon net ecosystem exchange NEE")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id ECO2-1) (attributes ) (index 1) (parent ECO2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::ECO2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 50-100km, currently 2x2deg = 100km, future 0.5x0.5deg=50km)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-1) (attributes ) (index 1) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future NWP grid size (<12km achieved, <4km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3 days required 2 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3 days required 2 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band achieved, P-band ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT1-2-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.1 Freeze/thaw state")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT1-2) (attributes ) (index 2) (parent WAT1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT1-2-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (0.6 psu achieved, 0.2 psu required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "1.7.3 Rain rate, tropical storms, and hurricanes")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT2-1) (attributes ) (index 1) (parent WAT2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Accuracy ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.2.4 snow cover")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT3-1) (attributes ) (index 1) (parent WAT3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet future climate models grid size (achieved 150-300km, 150km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (3-7 days achieved, 2-3 days req'd)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Accuracy ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (High accuracy req'd, obtained through multispectral combination of sensors)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650-1000km achieved, >1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650-1000km achieved, >1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)" )) (bind ?reason (str-cat ?reason  "SSO orbit does not provide adequate coverage of polar regions (polar orbit required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::WAT4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "4.3.2 Sea ice cover")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id WAT4-1) (attributes ) (index 1) (parent WAT4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::WAT4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA1-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA1-1) (attributes ) (index 1) (parent HEA1 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA1-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA2-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA2-1) (attributes ) (index 1) (parent HEA2 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA2-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA3-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA3-1) (attributes ) (index 1) (parent HEA3 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA3-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR for drought monitoring (achieved 10-50km, <10km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (10% goal, 15% threshold)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (10% goal, 15% threshold)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA4-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA4-1) (attributes ) (index 1) (parent HEA4 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA4-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Horizontal-Spatial-Resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient HSR to meet needs for river flas flood forecasts (50km required)" )) (bind ?reason (str-cat ?reason  "Insufficient HSR to meet needs for river flas flood forecasts (50km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Temporal-resolution# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient temporal resolution (2-3 days required 1 days ideal)" )) (bind ?reason (str-cat ?reason  "Insufficient temporal resolution (2-3 days required 1 days ideal)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Accuracy# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient accuracy (4-10% achieved, 4% required)" )) (bind ?reason (str-cat ?reason  "Insufficient accuracy (4-10% achieved, 4% required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (soil-penetration# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient penetration (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient penetration (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (Swath# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient swath (650km degraded, 1000km required)" )) (bind ?reason (str-cat ?reason  "Insufficient swath (650km degraded, 1000km required)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (sensitivity# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)" )) (bind ?reason (str-cat ?reason  "Insufficient sensitivity to soil moisture in vegetation (L-band required, P-band not needed)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (image-distortion# ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Too large image distortion" )) (bind ?reason (str-cat ?reason  "Too large image distortion")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-inclination ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Suboptimal illumination conditions (not SSO)" )) (bind ?reason (str-cat ?reason  "Suboptimal illumination conditions (not SSO)")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (orbit-RAAN ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "AM/PM SSO (DD required) - degraded quality" )) (bind ?reason (str-cat ?reason  "AM/PM SSO (DD required) - degraded quality")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

        (defrule REQUIREMENTS::HEA5-1-attrib ?m <- (REQUIREMENTS::Measurement (taken-by ?whom)  (power-duty-cycle# ?pc) (data-rate-duty-cycle# ?dc)  (Parameter "2.3.2 soil moisture")
    (All-weather ?val1&~nil)

         ) => (bind ?reason "") (bind ?new-reasons (create$ N-A ))

         (bind ?x1 (nth$ (find-bin-num ?val1 )))

          (if (< ?x1 1.0) then (bind ?new-reasons (replace$  ?new-reasons 1 1 "Missing all-weather capability." )) (bind ?reason (str-cat ?reason  "Missing all-weather capability.")))
    
         (bind ?list (create$ ?x1 ))


     (assert (AGGREGATION::SUBOBJECTIVE (id HEA5-1) (attributes ) (index 1) (parent HEA5 ) (attrib-scores ?list) (satisfaction (*$ ?list)) (reasons ?new-reasons) (satisfied-by ?whom) (reason ?reason ) (requirement-id (?m getFactId))
     (factHistory (str-cat "{R" (?*rulesMap* get REQUIREMENTS::HEA5-1-attrib) " A" (call ?m getFactId) "}")) )) )


 

(deffacts REQUIREMENTS::init-subobjectives


 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F0))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F1))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F2))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F3))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F4))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F5))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F6))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F7))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F8))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA1-1) (index 1) (parent WEA1) (reasons (create$ N-A  ))
    (factHistory F9))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F10))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F11))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F12))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F13))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F14))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F15))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F16))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F17))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F18))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA2-1) (index 1) (parent WEA2) (reasons (create$ N-A  ))
    (factHistory F19))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F20))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F21))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F22))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F23))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F24))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F25))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F26))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F27))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F28))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WEA3-1) (index 1) (parent WEA3) (reasons (create$ N-A  ))
    (factHistory F29))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F30))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F31))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F32))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F33))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F34))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F35))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F36))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F37))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F38))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-1) (index 1) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F39))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F40))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F41))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F42))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F43))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F44))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F45))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F46))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F47))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F48))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI1-2) (index 2) (parent CLI1) (reasons (create$ N-A  ))
    (factHistory F49))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F50))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F51))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F52))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F53))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F54))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F55))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F56))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-1) (index 1) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F57))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F58))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F59))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F60))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F61))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F62))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F63))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id CLI2-2) (index 2) (parent CLI2) (reasons (create$ N-A  ))
    (factHistory F64))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F65))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F66))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F67))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F68))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F69))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F70))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F71))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F72))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F73))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO1-1) (index 1) (parent ECO1) (reasons (create$ N-A  ))
    (factHistory F74))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F75))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F76))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F77))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F78))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F79))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F80))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F81))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F82))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F83))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id ECO2-1) (index 1) (parent ECO2) (reasons (create$ N-A  ))
    (factHistory F84))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F85))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F86))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F87))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F88))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F89))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F90))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F91))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F92))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F93))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-1) (index 1) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F94))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F95))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F96))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F97))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F98))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F99))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F100))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F101))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F102))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F103))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT1-2) (index 2) (parent WAT1) (reasons (create$ N-A  ))
    (factHistory F104))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F105))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F106))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F107))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F108))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F109))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F110))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT2-1) (index 1) (parent WAT2) (reasons (create$ N-A  ))
    (factHistory F111))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F112))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F113))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F114))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F115))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F116))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F117))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT3-1) (index 1) (parent WAT3) (reasons (create$ N-A  ))
    (factHistory F118))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F119))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F120))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F121))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F122))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F123))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F124))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id WAT4-1) (index 1) (parent WAT4) (reasons (create$ N-A  ))
    (factHistory F125))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F126))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F127))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F128))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F129))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F130))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F131))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F132))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F133))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F134))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA1-1) (index 1) (parent HEA1) (reasons (create$ N-A  ))
    (factHistory F135))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F136))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F137))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F138))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F139))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F140))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F141))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F142))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F143))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F144))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA2-1) (index 1) (parent HEA2) (reasons (create$ N-A  ))
    (factHistory F145))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F146))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F147))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F148))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F149))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F150))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F151))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F152))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F153))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F154))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA3-1) (index 1) (parent HEA3) (reasons (create$ N-A  ))
    (factHistory F155))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F156))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F157))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F158))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F159))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F160))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F161))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F162))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F163))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F164))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA4-1) (index 1) (parent HEA4) (reasons (create$ N-A  ))
    (factHistory F165))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F166))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F167))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F168))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F169))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F170))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F171))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F172))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F173))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F174))

 
    (AGGREGATION::SUBOBJECTIVE (satisfaction 0.0) (id HEA5-1) (index 1) (parent HEA5) (reasons (create$ N-A  ))
    (factHistory F175))

 
 )